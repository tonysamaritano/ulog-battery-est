# Class model of a standard LiPo battery

import sys
import pyulog as ulog
import matplotlib.pyplot as plt
import numpy as np
from scipy.optimize import curve_fit


class BatteryModel:
    def __scale_temperature(self):
        """
        Scale capacity based on external temperature

        NOTE: To be implemented in the future
        """
        pass

    def __drain_curve_capacity(self, voltage):
        """
        Third order equation used to estimate percent capacity from voltage

        Equation generated by <batt-testing.py>

        :param voltage: voltage to estimate
        :return: estimated percent remaining of battery
        """
        return 4438.520356552959*voltage**3 + -161808.41170109142*voltage**2 + 1970036.1888353096*voltage + -8003392.537598927

    def __time_estimation_curve(self, percent_capacity):
        """
        Third order equation used to estimate time remaining from percent capacity

        Equation generated by <batt-testing.py>

        :param percent_capacity: battery capacity represented as a percentage
        :return: estimated time remaining for a flight
        """
        return 5.124055173497321e-10*percent_capacity**3 + -9.008950105302864e-06*percent_capacity**2 + 0.17888813746864485*percent_capacity + -32.85067290189358

    def simulate(self, voltage):
        """
        Simulate final time estimation from ULog voltages
        Best estimations from idle batteries

        :param voltage: voltage value
        :return: estimated time remaining in seconds
        """

        return self.__time_estimation_curve(self.__drain_curve_capacity(voltage))
