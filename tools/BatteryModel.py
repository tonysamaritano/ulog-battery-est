# Class model of a standard LiPo battery

import sys
import pyulog as ulog
import matplotlib.pyplot as plt
import numpy as np
from scipy.optimize import curve_fit


class BatteryModel:
    def __scale_temperature(self):
        """
        Scale capacity based on external temperature

        NOTE: To be implemented in the future
        """
        pass

    def __drain_curve_percent(self, voltage):
        """
        Third order equation used to estimate percent capacity from voltage

        Equation generated by <batt-testing.py>

        :param voltage: voltage to estimate
        :return: estimated percent remaining of battery
        """
        return 58.821010559671066*voltage**3 + -2134.5758966115527*voltage**2 + 25869.660996405204*voltage + -104622.36370746762

    def __time_estimation_curve(self, percent_capacity):
        """
        Third order equation used to estimate time remaining from percent capacity

        Equation generated by <batt-testing.py>

        :param percent_capacity: battery capacity represented as a percentage
        :return: estimated time remaining for a flight
        """
        return 0.00031623534490089853*percent_capacity**3 + -0.06535263801996286*percent_capacity**2 + 15.21882160202914*percent_capacity + -32.77764056651616

    def simulate(self, voltage):
        """
        Simulate final time estimation from ULog voltages
        Best estimations from idle batteries

        :param voltage: voltage value
        :return: estimated time remaining in seconds
        """

        return self.__time_estimation_curve(self.__drain_curve_percent(voltage))
